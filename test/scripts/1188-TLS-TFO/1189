# TLS client: tls-on-connect, TFO
#
# Enable the TFO feature in the kernel
# (Linux: /etc/sysctl.conf net.ipv4.tcp_fastopen=3)
#
# (On Fedora) install iproute-tc to get the tc command
# and kernel-modules-extra to get the netem packet scheduler.
# Also you may need to edit /etc/modprobe.d/sch_netem-blacklist.conf
# if that file exists.
#
# For packet-capture, use "runtest -keep" and add (at least) tls debug on the daemon line.
# For GnuTLS, additionally run the daemon under sudo.
# Tell wireshark to use DIR/spool/sslkeys for Master Secret log, and decode TCP/1225 as TLS, TLS/1225 as SMTP
#
# We get (TLS1.3 , OpenSSL):
#    SYN, Client Hello  >
#			...
#			< SYN,ACK
#			< Server Hello, Encr-Extns, Cert, Cert-Verify, Finished
#			...
#    ACK		>
#    Finshed		>
#			...
#			< Banner
#    EHLO		>
#			< EHLO resp
#    MAIL,RCPT,DATA	>
#			< ACK,ACK,DATA-go-ahead
#
# GnuTLS splits both the server records and the client response pair over two TCP segments:
#    SYN, Client Hello	>
#			...
#			< SYN,ACK
#    ACK		>
#			< Server Hello, Change Ciph
#			< Extensions, Cert, Cert Verify, Finished
#			...
#    Change Ciph	>
#    Finished		>
#			...
#			< ACK
#			< Banner
#
# (otherwise the same).  The extra segments are piplined and do not incur an extra roundtrip time.
#
# To see that pipelining :-
sudo perl
system("tc qdisc add dev lo root netem delay 50ms");
****
#
# We still can't merge the 3rd-ACK with the (encrypted) Banner
# but that ACK does ack the initial Server Hello+.
#
# Neither can we merge the SYN,ACK with the Server Hello+.
#
#
#
# To see the TFO(R):
# First clear any previously-obtained cookie:
sudo perl
open(INFO, "-|", "/usr/bin/uname -s");
$_ = <INFO>;
if (/^FreeBSD/) {
system("sysctl net.inet.tcp.fastopen.client_enable=0");
system("sysctl net.inet.tcp.fastopen.client_enable=1");
} else {
system ("[ -e /proc/sys/net/ipv4/tcp_fastopen_blackhole_timeout_sec ] && echo 0 > /proc/sys/net/ipv4/tcp_fastopen_blackhole_timeout_sec");
system ("ip tcp_metrics delete 127.0.0.1");
system ("ip tcp_metrics delete HOSTIPV4");
}
****
#
#
# sudo exim -DSERVER=server -d+tls -bd -oX PORT_D
exim -DSERVER=server -bd -oX PORT_D
****
# Queue an initial message.  This one will request a cookie for later TFOs.
exim CALLER@test.ex
Test message. Contains FF: ÿ
****
# Queue two more recipients, to be sent to different IPs. The first should
# get TFO using the cookie just obtained, then second should not.
exim CALLER@test.ex abcd@test.ex xyz@test.ex
Test message to two different hosts
****
exim -v -qf
****
killdaemon
exim -DSERVER=server -DNOTDAEMON -qf
****
#
#
#
#
#
sudo perl
system("sudo tc qdisc delete dev lo root");
****
