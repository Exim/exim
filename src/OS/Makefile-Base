# This file is the basis of the main makefile for Exim and friends. The
# makefile at the top level arranges to build the main makefile by calling
# scripts/Configure-Makefile from within the build directory. This
# concatenates the configuration settings from Local/Makefile and other,
# optional, Local/* files at the front of this file, to create Makefile in the
# build directory.
#
# Copyright (c) The Exim Maintainers 1995 - 2024
# SPDX-License-Identifier: GPL-2.0-or-later

SHELL      = $(MAKE_SHELL)
SCRIPTS    = ../scripts
O          = ../OS
EDITME     = ../Local/Makefile
EXIMON_EDITME = ../Local/eximon.conf

# The compiler used for linking is normally the same as the compiler used for
# compiling. However, by giving it a different name, we can override it from
# the command line, and this is helpful for certain types of testing.

LNCC = $(CC)

# The compile commands can be very long. To make the output look better,
# they are not normally echoed in full. To get full echoing, the caller
# must set FULLECHO='' on the command line and call make with -e. We default
# FULLECHO to '@' to suppress the full echo. Then define an abbreviation.

FULLECHO = @
FE       = $(FULLECHO)

# The default target double-checks the existence of $(EDITME) and then arranges
# to touch it if it exists and any of the optional configuration files, which
# depend on the os or the architecture, have been altered. The same sub-target
# does the same thing for the eximon configuration file if it exists. Then
# there is a check that the Makefile (the one built from this file) is
# up-to-date. Then the os-specific source files and the C configuration file
# are set up, and finally it goes to the main Exim target.

all:       utils exim dynmodules
config:    $(EDITME) checklocalmake Makefile os.c config.h version.h version.sh macro.c

exim_openssl exim_gnutls: clean exim
	cp exim $@

checklocalmake:
	@if $(SHELL) $(SCRIPTS)/newer $(EDITME)-$(OSTYPE) $(EDITME) || \
	  $(SHELL) $(SCRIPTS)/newer $(EDITME)-$(ARCHTYPE) $(EDITME) || \
	  $(SHELL) $(SCRIPTS)/newer $(EDITME)-$(OSTYPE)-$(ARCHTYPE) $(EDITME); \
	then \
	  touch $(EDITME); \
	fi
	@if $(SHELL) $(SCRIPTS)/newer $(EXIMON_EDITME)-$(OSTYPE) $(EXIMON_EDITME) || \
	  $(SHELL) $(SCRIPTS)/newer $(EXIMON_EDITME)-$(ARCHTYPE) $(EXIMON_EDITME) || \
	  $(SHELL) $(SCRIPTS)/newer $(EXIMON_EDITME)-$(OSTYPE)-$(ARCHTYPE) $(EXIMON_EDITME); \
	then \
	  if [ -f $(EXIMON_EDITME) ]; then touch $(EXIMON_EDITME); fi \
	fi

$(EDITME):
	@echo " "
	@echo "*** Please create Local/Makefile by copying src/EDITME and making"
	@echo "*** appropriate changes for your site."
	@echo " "
	@false

$(EXIMON_EDITME):
	@echo " "
	@echo "*** Please create Local/eximon.conf by copying exim_monitor/EDITME and making"
	@echo "*** appropriate changes for your site."
	@echo " "
	@test ! -d ../Local && mkdir ../Local
	@false

# Check that the local Makefile is up-to-date

Makefile: ../OS/Makefile-Base ../OS/Makefile-Default \
          $(SCRIPTS)/Configure $(SCRIPTS)/Configure-Makefile $(EDITME)
	@echo " "
	@echo "*** Makefile needs rebuilding"
	@echo "*** Please run \"make makefile\" at top level"
	@echo " "
	@false

# Build (link) the os.h file

os.h:	$(SCRIPTS)/Configure-os.h \
	$(O)/os.h-FreeBSD	\
	$(O)/os.h-GNU		\
	$(O)/os.h-Linux		\
	$(O)/os.h-OpenBSD	\
	$(O)/os.h-SunOS5
	$(SHELL) $(SCRIPTS)/Configure-os.h

# Build the os.c file

os.c:   ../src/os.c \
	$(SCRIPTS)/Configure-os.c \
	$(O)/os.c-FreeBSD	\
	$(O)/os.c-GNU		\
	$(O)/os.c-Linux		\
	$(O)/os.c-SunOS5
	$(SHELL) $(SCRIPTS)/Configure-os.c

# Build the config.h file.

config.h: Makefile buildconfig ../src/config.h.defaults $(EDITME)
	$(SHELL) $(SCRIPTS)/Configure-config.h "$(MAKE)"

# Build the builtin-macros data struct

MACRO_HSRC = macro_predef.h os.h globals.h config.h macros.h path_max.h \
	routers/accept.h routers/dnslookup.h routers/ipliteral.h \
	routers/iplookup.h routers/manualroute.h routers/queryprogram.h \
	routers/redirect.h

OBJ_MACRO = macro_predef.o \
	macro-globals.o macro-readconf.o macro-expand.o macro-route.o \
	macro-transport.o macro-drtables.o macro-acl.o macro-tls.o \
	macro-appendfile.o macro-autoreply.o macro-lmtp.o macro-pipe.o macro-queuefile.o \
	macro-smtp.o macro-accept.o macro-dnslookup.o macro-ipliteral.o macro-iplookup.o \
	macro-manualroute.o macro-queryprogram.o macro-redirect.o \
	macro-auth-spa.o macro-cram_md5.o macro-cyrus_sasl.o macro-dovecot.o macro-gsasl.o \
	macro-heimdal_gssapi.o macro-plaintext.o macro-spa.o macro-authtls.o macro-external.o \
	macro-dkim.o macro-malware.o macro-signing.o

$(OBJ_MACRO):	$(MACRO_HSRC)

macro_predef.o :	macro_predef.c
	@echo "$(CC) -DMACRO_PREDEF macro_predef.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ macro_predef.c
macro-globals.o :	globals.c
	@echo "$(CC) -DMACRO_PREDEF globals.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ globals.c
macro-readconf.o :	readconf.c
	@echo "$(CC) -DMACRO_PREDEF readconf.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ readconf.c
macro-expand.o :	expand.c
	@echo "$(CC) -DMACRO_PREDEF expand.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ expand.c
macro-route.o :		route.c
	@echo "$(CC) -DMACRO_PREDEF route.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ route.c
macro-transport.o:	transport.c
	@echo "$(CC) -DMACRO_PREDEF transport.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ transport.c
macro-drtables.o :	drtables.c
	@echo "$(CC) -DMACRO_PREDEF drtables.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ drtables.c
macro-acl.o:	acl.c
	@echo "$(CC) -DMACRO_PREDEF acl.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ acl.c
macro-tls.o:	tls.c tls-gnu.c tls-openssl.c
	@echo "$(CC) -DMACRO_PREDEF tls.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ tls.c
macro-appendfile.o :	transports/appendfile.c
	@echo "$(CC) -DMACRO_PREDEF transports/appendfile.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ transports/appendfile.c
macro-autoreply.o :	transports/autoreply.c
	@echo "$(CC) -DMACRO_PREDEF transports/autoreply.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ transports/autoreply.c
macro-lmtp.o:		transports/lmtp.c
	@echo "$(CC) -DMACRO_PREDEF transports/lmtp.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ transports/lmtp.c
macro-pipe.o :		transports/pipe.c
	@echo "$(CC) -DMACRO_PREDEF transports/pipe.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ transports/pipe.c
macro-queuefile.o :	transports/queuefile.c
	@echo "$(CC) -DMACRO_PREDEF transports/queuefile.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ transports/queuefile.c
macro-smtp.o :		transports/smtp.c
	@echo "$(CC) -DMACRO_PREDEF transports/smtp.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ transports/smtp.c
macro-accept.o :	routers/accept.c
	@echo "$(CC) -DMACRO_PREDEF routers/accept.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ routers/accept.c
macro-dnslookup.o :	routers/dnslookup.c
	@echo "$(CC) -DMACRO_PREDEF routers/dnslookup.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ routers/dnslookup.c
macro-ipliteral.o :	routers/ipliteral.c
	@echo "$(CC) -DMACRO_PREDEF routers/ipliteral.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ routers/ipliteral.c
macro-iplookup.o :	routers/iplookup.c
	@echo "$(CC) -DMACRO_PREDEF routers/iplookup.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ routers/iplookup.c
macro-manualroute.o :	routers/manualroute.c
	@echo "$(CC) -DMACRO_PREDEF routers/manualroute.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ routers/manualroute.c
macro-queryprogram.o :	routers/queryprogram.c
	@echo "$(CC) -DMACRO_PREDEF routers/queryprogram.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ routers/queryprogram.c
macro-redirect.o :	routers/redirect.c
	@echo "$(CC) -DMACRO_PREDEF routers/redirect.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ routers/redirect.c
macro-auth-spa.o :	auths/auth-spa.c
	@echo "$(CC) -DMACRO_PREDEF auths/auth-spa.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/auth-spa.c
macro-cram_md5.o :	auths/cram_md5.c
	@echo "$(CC) -DMACRO_PREDEF auths/cram_md5.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/cram_md5.c
macro-cyrus_sasl.o :	auths/cyrus_sasl.c
	@echo "$(CC) -DMACRO_PREDEF auths/cyrus_sasl.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/cyrus_sasl.c
macro-dovecot.o:	auths/dovecot.c
	@echo "$(CC) -DMACRO_PREDEF auths/dovecot.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/dovecot.c
macro-external.o:	auths/external.c
	@echo "$(CC) -DMACRO_PREDEF auths/external.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/external.c
macro-gsasl.o :	auths/gsasl.c
	@echo "$(CC) -DMACRO_PREDEF auths/gsasl.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/gsasl.c
macro-heimdal_gssapi.o:	auths/heimdal_gssapi.c
	@echo "$(CC) -DMACRO_PREDEF auths/heimdal_gssapi.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/heimdal_gssapi.c
macro-plaintext.o :	auths/plaintext.c
	@echo "$(CC) -DMACRO_PREDEF auths/plaintext.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/plaintext.c
macro-spa.o :		auths/spa.c
	@echo "$(CC) -DMACRO_PREDEF auths/spa.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/spa.c
macro-authtls.o:	auths/tls.c
	@echo "$(CC) -DMACRO_PREDEF auths/tls.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ auths/tls.c
macro-dkim.o:		miscmods/dkim.c
	@echo "$(CC) -DMACRO_PREDEF miscmods/dkim.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ miscmods/dkim.c
macro-malware.o:	malware.c
	@echo "$(CC) -DMACRO_PREDEF malware.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ malware.c
macro-signing.o:	miscmods/signing.c
	@echo "$(CC) -DMACRO_PREDEF miscmods/signing.c"
	$(FE)$(CC) -c $(CFLAGS) -DMACRO_PREDEF $(INCLUDE) -o $@ miscmods/signing.c

macro_predef: $(OBJ_MACRO)
	@echo "$(LNCC) -o $@"
	$(FE)$(LNCC) -o $@ $(LFLAGS) $(OBJ_MACRO)

macro.c: macro_predef
	./macro_predef > macro.c

# This target is recognized specially by GNU make. It records those targets
# that do not correspond to files that are being built and which should
# therefore always be run, even if the files exist. This shouldn't in fact be a
# problem, but it does no harm. Other make programs will just ignore this.

.PHONY: all config utils \
	buildauths buildlookups buildrouters \
        buildtransports buildmisc dynmodules checklocalmake clean


utils:  $(EXIM_MONITOR) exicyclog exinext exiwhat \
        exigrep eximstats exipick exiqgrep exiqsumm \
        transport-filter.pl exim_checkaccess \
        exim_dbmbuild exim_dumpdb exim_fixdb exim_tidydb \
	exim_lock exim_msgdate exim_id_update


# Targets for special-purpose configuration header builders
buildconfig: buildconfig.c
	@echo "$(CC) buildconfig.c"
	$(FE)$(CC) $(CFLAGS) $(INCLUDE) -o buildconfig buildconfig.c $(LIBS)


util_deps: config ../src/utils/msgid.frag

# Target for the exicyclog utility script
exicyclog: util_deps ../src/utils/exicyclog.src
	@rm -f exicyclog
	@. ./version.sh && sed \
	  -e "s?PROCESSED_FLAG?This file has been so processed.?"\
	  -e "/^# /p" \
	  -e "/^# /d" \
	  -e "/^MSGID_RE/b mi" \
	  -e "s?CONFIGURE_FILE_USE_NODE?$(CONFIGURE_FILE_USE_NODE)?" \
	  -e "s?CONFIGURE_FILE_USE_EUID?$(CONFIGURE_FILE_USE_EUID)?" \
	  -e "s?CONFIGURE_FILE?$(CONFIGURE_FILE)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?EXICYCLOG_MAX?$(EXICYCLOG_MAX)?" \
	  -e "s?COMPRESS_COMMAND?$(COMPRESS_COMMAND)?" \
	  -e "s?COMPRESS_SUFFIX?$(COMPRESS_SUFFIX)?" \
	  -e "s?CHGRP_COMMAND?$(CHGRP_COMMAND)?" \
	  -e "s?CHMOD_COMMAND?$(CHMOD_COMMAND)?" \
	  -e "s?CHOWN_COMMAND?$(CHOWN_COMMAND)?" \
	  -e "s?MV_COMMAND?$(MV_COMMAND)?" \
	  -e "s?RM_COMMAND?$(RM_COMMAND)?" \
	  -e "s?TOUCH_COMMAND?$(TOUCH_COMMAND)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  -e "p" \
	  -e "d" \
	  -e ": mi" \
	  -e "s?^?# Insert ?" \
	  -e "r ../src/utils/msgid.frag" \
	  ../src/utils/exicyclog.src > exicyclog-t
	@mv exicyclog-t exicyclog
	@chmod a+x exicyclog
	@./exicyclog -v 2>&1 >/dev/null
	@echo ">>> exicyclog script built"

# Target for the exinext utility script
exinext: util_deps ../src/utils/exinext.src
	@rm -f exinext
	@. ./version.sh && sed \
	  -e "s?PROCESSED_FLAG?This file has been so processed.?"\
	  -e "/^# /p" \
	  -e "/^# /d" \
	  -e "/^MSGID_RE/b mi" \
	  -e "s?CONFIGURE_FILE_USE_NODE?$(CONFIGURE_FILE_USE_NODE)?" \
	  -e "s?CONFIGURE_FILE?$(CONFIGURE_FILE)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  -e "p" \
	  -e "d" \
	  -e ": mi" \
	  -e "s?^?# Insert ?" \
	  -e "r ../src/utils/msgid.frag" \
	  ../src/utils/exinext.src > exinext-t
	@mv exinext-t exinext
	@chmod a+x exinext
	@./exinext -v 2>&1 >/dev/null
	@echo ">>> exinext script built"

# Target for the exiwhat utility script
exiwhat: config ../src/utils/exiwhat.src
	@rm -f exiwhat
	@. ./version.sh && sed \
	  -e "s?PROCESSED_FLAG?This file has been so processed.?"\
	  -e "/^# /p" \
	  -e "/^# /d" \
	  -e "s?CONFIGURE_FILE_USE_NODE?$(CONFIGURE_FILE_USE_NODE)?" \
	  -e "s?CONFIGURE_FILE?$(CONFIGURE_FILE)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?EXIWHAT_PS_CMD?$(EXIWHAT_PS_CMD)?" \
	  -e "s?EXIWHAT_PS_ARG?$(EXIWHAT_PS_ARG)?" \
	  -e "s?EXIWHAT_KILL_SIGNAL?$(EXIWHAT_KILL_SIGNAL)?" \
	  -e "s?EXIWHAT_EGREP_ARG?$(EXIWHAT_EGREP_ARG)?" \
	  -e "s?EXIWHAT_MULTIKILL_CMD?$(EXIWHAT_MULTIKILL_CMD)?" \
	  -e "s?EXIWHAT_MULTIKILL_ARG?$(EXIWHAT_MULTIKILL_ARG)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  -e "s?RM_COMMAND?$(RM_COMMAND)?" \
	  ../src/utils/exiwhat.src > exiwhat-t
	@mv exiwhat-t exiwhat
	@chmod a+x exiwhat
	@./exiwhat -v 2>&1 >/dev/null
	@echo ">>> exiwhat script built"

# Target for the exim_checkaccess utility script
exim_checkaccess: config ../src/utils/exim_checkaccess.src
	@rm -f exim_checkaccess
	@. ./version.sh && sed \
	  -e "s?PROCESSED_FLAG?This file has been so processed.?"\
	  -e "/^# /p" \
	  -e "/^# /d" \
	  -e "s?CONFIGURE_FILE_USE_NODE?$(CONFIGURE_FILE_USE_NODE)?" \
	  -e "s?CONFIGURE_FILE?$(CONFIGURE_FILE)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  ../src/utils/exim_checkaccess.src > exim_checkaccess-t
	@mv exim_checkaccess-t exim_checkaccess
	@chmod a+x exim_checkaccess
	# @./exim_checkaccess -v 2>&1 >/dev/null
	@echo ">>> exim_checkaccess script built"; echo ""

# Target for the Exim monitor start-up script
eximon: config ../src/utils/eximon.src ../OS/eximon.conf-Default \
          ../Local/eximon.conf
	@rm -f eximon
	$(SHELL) $(SCRIPTS)/Configure-eximon
	@. ./version.sh && sed \
	  -e "s?PROCESSED_FLAG?This file has been so processed.?"\
	  -e "/^# /p" \
	  -e "/^# /d" \
	  -e "s?CONFIGURE_FILE_USE_NODE?$(CONFIGURE_FILE_USE_NODE)?" \
	  -e "s?CONFIGURE_FILE?$(CONFIGURE_FILE)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?BASENAME_COMMAND?$(BASENAME_COMMAND)?" \
	  -e "s?HOSTNAME_COMMAND?$(HOSTNAME_COMMAND)?" \
	  -e "s?X11_LD_LIBRARY?$(X11_LD_LIB)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  ../src/utils/eximon.src >> eximon
	@./eximon -v 2>&1 >/dev/null
	@echo ">>> eximon script built"; echo ""

# Targets for utilities; these are all Perl scripts that have to get the
# location of Perl put in them. A few need other things as well.

exigrep: util_deps ../src/utils/exigrep.src
	@rm -f exigrep
	@. ./version.sh && sed \
	  -e "s?PROCESSED_FLAG?This file has been so processed.?"\
	  -e "/^# /p" \
	  -e "/^# /d" \
	  -e "/^MSGID_RE/b mi" \
	  -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?ZCAT_COMMAND?$(ZCAT_COMMAND)?" \
          -e "s?COMPRESS_SUFFIX?$(COMPRESS_SUFFIX)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  -e "p" \
	  -e "d" \
	  -e ": mi" \
	  -e "s?^?# Insert ?" \
	  -e "r ../src/utils/msgid.frag" \
	  ../src/utils/exigrep.src > exigrep-t
	@mv exigrep-t exigrep
	@chmod a+x exigrep
	@./exigrep --version 2>&1 >/dev/null
	@echo ">>> exigrep script built"

exim_msgdate: util_deps ../src/utils/exim_msgdate.src
	@rm -f exim_msgdate
	@. ./version.sh && sed \
	  -e "s?PROCESSED_FLAG?This file has been so processed.?"\
	  -e "/^[ \t]*# /p" \
	  -e "/^[ \t]*# /d" \
	  -e "/^MSGID_RE/b mi" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?BASE_62?$${BASE_62:-62}?" \
	  -e "s?CONFIGURE_FILE\"?$(CONFIGURE_FILE)\"?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  -e "p" \
	  -e "d" \
	  -e ": mi" \
	  -e "s?^?# Insert ?" \
	  -e "r ../src/utils/msgid.frag" \
	  ../src/utils/exim_msgdate.src > exim_msgdate-t
	@mv exim_msgdate-t exim_msgdate
	@chmod a+x exim_msgdate
	@./exim_msgdate -v 2>&1 >/dev/null
	@echo ">>> exim_msgdate script built"

eximstats: config ../src/utils/eximstats.src
	@rm -f eximstats
	@. ./version.sh && sed \
	  -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  ../src/utils/eximstats.src > eximstats-t
	@mv eximstats-t eximstats
	@chmod a+x eximstats
	@./eximstats -v 2>&1 >/dev/null
	@echo ">>> eximstats script built"

exiqgrep: util_deps ../src/utils/exiqgrep.src
	@rm -f exiqgrep
	@. ./version.sh && sed \
	  -e "s?PROCESSED_FLAG?This file has been so processed.?"\
	  -e "/^# /p" \
	  -e "/^# /d" \
	  -e "/^MSGID_RE/b mi" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  -e "p" \
	  -e "d" \
	  -e ": mi" \
	  -e "s?^?# Insert ?" \
	  -e "r ../src/utils/msgid.frag" \
	  ../src/utils/exiqgrep.src > exiqgrep-t
	@mv exiqgrep-t exiqgrep
	@chmod a+x exiqgrep
	@./exiqgrep -v 2>&1 >/dev/null
	@echo ">>> exiqgrep script built"

exiqsumm: util_deps ../src/utils/exiqsumm.src
	@rm -f exiqsumm
	@. ./version.sh && sed \
	  -e "/^MSGID_RE/b mi" \
	  -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  -e "p" \
	  -e "d" \
	  -e ": mi" \
	  -e "s?^?# Insert ?" \
	  -e "r ../src/utils/msgid.frag" \
	  ../src/utils/exiqsumm.src > exiqsumm-t
	@mv exiqsumm-t exiqsumm
	@chmod a+x exiqsumm
	@./exiqsumm -v 2>&1 >/dev/null
	@echo ">>> exiqsumm script built"

exipick: config ../src/utils/exipick.src
	@rm -f exipick
	@. ./version.sh && sed \
	  -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?SPOOL_DIRECTORY?$(SPOOL_DIRECTORY)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  ../src/utils/exipick.src > exipick-t
	@mv exipick-t exipick
	@chmod a+x exipick
	@./exipick -v 2>&1 >/dev/null
	@echo ">>> exipick script built"

exim_id_update: util_deps ../src/utils/exim_id_update.src
	@rm -f exim_id_update
	@. ./version.sh && sed \
	  -e "/^MSGID_RE/b mi" \
	  -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?SPOOL_DIRECTORY?$(SPOOL_DIRECTORY)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  -e "p" \
	  -e "d" \
	  -e ": mi" \
	  -e "s?^?# Insert ?" \
	  -e "r ../src/utils/msgid.frag" \
	  ../src/utils/exim_id_update.src > exim_id_update-t
	@mv exim_id_update-t exim_id_update
	@chmod a+x exim_id_update
	@./exim_id_update -v 2>&1 >/dev/null
	@echo ">>> exim_id_update script built"

transport-filter.pl: config ../src/transport-filter.src
	@rm -f transport-filter.pl
	@. ./version.sh && sed \
	  -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?EXIM_RELEASE_VERSION?$${EXIM_RELEASE_VERSION}?" \
	  -e "s?EXIM_VARIANT_VERSION?$${EXIM_VARIANT_VERSION}?" \
	  ../src/transport-filter.src > transport-filter.pl-t
	@mv transport-filter.pl-t transport-filter.pl
	@chmod a+x transport-filter.pl
	@echo ">>> transport-filter.pl script built"


# These are objects of optional features. They are always compiled, but
# if the corresponding #defines are not set, they wind up empty and
# are thrown away by the linker.

OBJ_WITH_CONTENT_SCAN = malware.o mime.o regex.o spam.o spool_mbox.o
OBJ_EXPERIMENTAL =	bmi_spam.o \
			dane.o \
			dcc.o \
			imap_utf7.o \
			utf8.o \
			xclient.o

# Targets for final binaries; the main one has a build number which is
# updated each time. We don't bother with that for the auxiliaries.
OBJ_LOOKUPS = lf_quote.o lf_check_file.o lf_sqlperform.o
OBJ_ROUTERS = rf_change_domain.o rf_expand_data.o rf_get_errors_address.o \
	rf_get_munge_headers.o rf_get_transport.o rf_get_ugid.o \
	rf_lookup_hostlist.o rf_queue_add.o rf_self_action.o rf_set_ugid.o
OBJ_AUTHS = call_pwcheck.o check_serv_cond.o \
	get_data.o get_no64_data.o pwcheck.o
OBJ_HINTS = hintsdb/hints_sqlite.o hintsdb/hints_gdbm.o

# before building the objects of the hints db, we need to have a valid
# config.h
${OBJ_HINTS}: config

OBJ_EXIM = acl.o atrn.o base64.o child.o crypt16.o daemon.o dbfn.o debug.o \
	deliver.o directory.o dns.o drtables.o enq.o exim.o expand.o \
        filtertest.o globals.o dnsbl.o hash.o \
        header.o host.o host_address.o ip.o log.o lss.o match.o md5.o moan.o \
        os.o parse.o priv.o proxy.o queue.o \
        rda.o readconf.o receive.o retry.o rewrite.o rfc2047.o regex_cache.o \
        route.o search.o smtp_in.o smtp_out.o spool_in.o spool_out.o \
        std-crypto.o store.o string.o tls.o tod.o transport.o tree.o verify.o \
        xtextencode.o environment.o macro.o \
        $(OBJ_LOOKUPS) $(OBJ_ROUTERS) $(OBJ_AUTHS) \
        local_scan.o $(OBJ_WITH_CONTENT_SCAN) \
        $(OBJ_EXPERIMENTAL) \
        $(OBJ_HINTS)

exim:   buildlookups buildauths \
        buildrouters buildtransports buildmisc \
        $(OBJ_EXIM) version.o
	@echo "$(LNCC) -o exim"
	$(FE)$(PURIFY) $(LNCC) -o exim $(LFLAGS) $(OBJ_EXIM) version.o \
	  routers/routers.a transports/transports.a lookups/lookups.a \
	  auths/auths.a miscmods/miscmods.a \
	  $(LIBRESOLV) $(LIBS) $(LIBS_EXIM) $(IPV6_LIBS) $(EXTRALIBS) \
	  $(EXTRALIBS_EXIM) $(DBMLIB) $(LOOKUP_LIBS) $(AUTH_LIBS) \
	  $(PERL_LIBS) $(TLS_LIBS) $(PCRE_LIBS) $(LDFLAGS)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then \
	  echo $(STRIP_COMMAND) exim; \
	  $(STRIP_COMMAND) exim; \
	fi
	$(EXIM_CHMOD)
	@echo " "
	@echo ">>> exim binary built"
	@echo " "

# The utility for dumping the contents of an exim database

OBJ_DUMPDB = exim_dumpdb.o util-os.o util-store.o util-xtextencode.o $(OBJ_HINTS)

exim_dumpdb: $(OBJ_DUMPDB)
	@echo "$(LNCC) -o exim_dumpdb"
	$(FE)$(LNCC) $(CFLAGS) $(INCLUDE) -o exim_dumpdb $(LFLAGS) $^ \
	  $(LIBS) $(EXTRALIBS) $(DBMLIB)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then \
	  echo $(STRIP_COMMAND) exim_dumpdb; \
	  $(STRIP_COMMAND) exim_dumpdb; \
	fi
	@echo ">>> exim_dumpdb utility built"
	@echo " "

# The utility for interrogating/fixing the contents of an exim database

OBJ_FIXDB = exim_fixdb.o util-os.o util-store.o util-md5.o util-xtextencode.o $(OBJ_HINTS)

exim_fixdb:  $(OBJ_FIXDB)
	@echo "$(LNCC) -o exim_fixdb"
	$(FE)$(LNCC) $(CFLAGS) $(INCLUDE) -o exim_fixdb $(LFLAGS) $^ \
	  $(LIBS) $(EXTRALIBS) $(DBMLIB)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then \
	  echo $(STRIP_COMMAND) exim_fixdb; \
	  $(STRIP_COMMAND) exim_fixdb; \
	fi
	@echo ">>> exim_fixdb utility built"
	@echo " "

# The utility for tidying the contents of an exim database

OBJ_TIDYDB = exim_tidydb.o util-os.o util-store.o util-xtextencode.o $(OBJ_HINTS)

exim_tidydb: $(OBJ_TIDYDB)
	@echo "$(LNCC) -o exim_tidydb"
	$(FE)$(LNCC) $(CFLAGS) $(INCLUDE) -o exim_tidydb $(LFLAGS) $^ \
	  $(LIBS) $(EXTRALIBS) $(DBMLIB)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then \
	  echo $(STRIP_COMMAND) exim_tidydb; \
	  $(STRIP_COMMAND) exim_tidydb; \
	fi
	@echo ">>> exim_tidydb utility built"
	@echo " "

# The utility for building dbm files

OBJ_DBMBUILD = exim_dbmbuild.o util-xtextencode.o $(OBJ_HINTS)

exim_dbmbuild: $(OBJ_DBMBUILD)
	@echo "$(LNCC) -o exim_dbmbuild"
	$(FE)$(LNCC) $(CFLAGS) $(INCLUDE) -o exim_dbmbuild $(LFLAGS) $^ \
	  $(LIBS) $(EXTRALIBS) $(DBMLIB)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then \
	  echo $(STRIP_COMMAND) exim_dbmbuild; \
	  $(STRIP_COMMAND) exim_dbmbuild; \
	fi
	@echo ">>> exim_dbmbuild utility built"
	@echo " "

# The utility for locking a mailbox while messing around with it

exim_lock: exim_lock.c os.h
	@echo "$(CC) exim_lock.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) exim_lock.c
	@echo "$(LNCC) -o exim_lock"
	$(FE)$(LNCC) -o exim_lock $(LFLAGS) exim_lock.o  \
	  $(LIBS) $(EXTRALIBS)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then \
	  echo $(STRIP_COMMAND) exim_lock; \
	  $(STRIP_COMMAND) exim_lock; \
	fi
	@echo ">>> exim_lock utility built"
	@echo " "

# The X-based Exim monitor program's binary part. There's a macro for cutting
# out the modified TextPop module, because some antique link editors cannot
# handle the fact that it is redefining things that are found later in the
# Xaw library.

# Object modules that are the unique Eximon modules

MONBIN = em_StripChart.o $(EXIMON_TEXTPOP) em_globals.o em_init.o \
	em_log.o em_main.o em_menu.o em_queue.o em_strip.o \
	em_text.o em_xs.o

# The complete modules list also includes some specially compiled versions of
# code from the main Exim source tree.

OBJ_MONBIN = util-host_address.o \
	     util-queue.o \
	     util-spool_in.o \
	     util-store.o \
	     util-string.o \
	     util-tod.o \
	     util-tree.o \
	     util-xtextencode.o \
	     $(MONBIN)

eximon.bin: $(EXIMON_EDITME) eximon $(OBJ_MONBIN) ../exim_monitor/em_version.c \
		mytypes.h store.h path_max.h macros.h
	@echo "$(CC) exim_monitor/em_version.c"
	$(FE)$(CC) -o em_version.o -c \
	  $(CFLAGS) $(XINCLUDE) -I. ../exim_monitor/em_version.c
	@echo "$(LNCC) -o eximon.bin"
	$(FE)$(PURIFY) $(LNCC) -o eximon.bin em_version.o $(LFLAGS) $(XLFLAGS) \
	  $(OBJ_MONBIN) -lXaw -lXmu -lXt -lXext -lX11 $(PCRE_LIBS) \
	  $(LIBS) $(LIBS_EXIMON) $(EXTRALIBS) $(EXTRALIBS_EXIMON) -lc
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then \
	  echo $(STRIP_COMMAND) eximon.bin; \
	  $(STRIP_COMMAND) eximon.bin; \
	fi
	@echo ">>> exim monitor binary built"
	@echo " "


# Compile step for most of the exim modules. HDRS is a list of headers
# which cause everything to be rebuilt. PHDRS is the same, for the use
# of routers, transports, and authenticators. I can't find a way of doing this
# in one. This list is overkill, but it doesn't really take much time to
# rebuild Exim on a modern computer.

HDRS  =	blob.h \
	config.h \
	dbfunctions.h \
	exim.h \
	functions.h \
	globals.h \
	hash.h \
	hintsdb.h \
	hintsdb_structs.h \
	hintsdb/hints_bdb.h \
	hintsdb/hints_gdbm.h \
	hintsdb/hints_ndbm.h \
	hintsdb/hints_sqlite.h \
	hintsdb/hints_tdb.h \
	local_scan.h \
	macros.h \
	miscmods/arc_api.h \
	miscmods/dkim_api.h \
	miscmods/dmarc_api.h \
	miscmods/spf_api.h \
	mytypes.h \
	path_max.h \
	sha_ver.h \
	structs.h \
	os.h
PHDRS = ../config.h \
	../dbfunctions.h \
	../exim.h \
	../functions.h \
	../globals.h \
	../hintsdb.h \
	../hintsdb_structs.h \
	../hintsdb/hints_bdb.h \
	../hintsdb/hints_gdbm.h \
	../hintsdb/hints_ndbm.h \
	../hintsdb/hints_sqlite.h \
	../hintsdb/hints_tdb.h \
	../local_scan.h \
	../macros.h \
	../miscmods/arc_api.h \
	../miscmods/dkim_api.h \
	../miscmods/dmarc_api.h \
	../miscmods/spf_api.h \
	../mytypes.h \
	../path_max.h \
	../structs.h \
	../os.h

.SUFFIXES: .o .c
.c.o:   ;@echo "$(CC) $*.c"
	$(FE)$(CC) -o $@ -c $(CFLAGS) -I. $(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE) $*.c

# Update Exim's version information and build the version object.  The dependency
# chain here avoids problems under parallel-make.

version.sh:
	@../scripts/reversion

version.h: version.sh

cnumber.h: version.h

version.o: $(HDRS) cnumber.h version.h version.c

# This is the dummy module for use by test compiles of individual modules. It
# contains functions such as log_write() that may be called from bits of Exim
# in the tested code.

dummies.o:       dummies.c

# Compile instructions for the database utility modules

exim_dumpdb.o:   $(HDRS) exim_dbutil.c
	@echo "$(CC) -DEXIM_DUMPDB exim_dbutil.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) \
				      -DCOMPILE_UTILITY \
				      -DEXIM_DUMPDB \
				      -o exim_dumpdb.o exim_dbutil.c

exim_fixdb.o:    $(HDRS) exim_dbutil.c
	@echo "$(CC) -DEXIM_FIXDB exim_dbutil.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) \
				      -DCOMPILE_UTILITY \
				      -DEXIM_FIXDB \
				      -o exim_fixdb.o exim_dbutil.c

exim_tidydb.o:   $(HDRS) exim_dbutil.c
	@echo "$(CC) -DEXIM_TIDYDB exim_dbutil.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) \
				      -DCOMPILE_UTILITY \
				      -DEXIM_TIDYDB \
				      -o exim_tidydb.o exim_dbutil.c

# Compile instructions for exim_dbmbuild

exim_dbmbuild.o: $(HDRS) exim_dbmbuild.c
	@echo "$(CC) exim_dbmbuild.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY \
		-o exim_dbmbuild.o exim_dbmbuild.c

# Utilities use special versions of some modules - typically with debugging
# calls cut out.

util-host_address.o:   $(HDRS) host_address.c
	@echo "$(CC) -DCOMPILE_UTILITY host_address.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY -o util-host_address.o host_address.c

util-md5.o:   $(HDRS) md5.c
	@echo "$(CC) -DCOMPILE_UTILITY queue.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY -o util-md5.o md5.c

util-spool_in.o: $(HDRS) spool_in.c
	@echo "$(CC) -DCOMPILE_UTILITY spool_in.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY -o util-spool_in.o spool_in.c

util-store.o:    $(HDRS) store.c
	@echo "$(CC) -DCOMPILE_UTILITY store.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY -o util-store.o store.c

util-string.o:   $(HDRS) string.c
	@echo "$(CC) -DCOMPILE_UTILITY string.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY -o util-string.o string.c

util-queue.o:   $(HDRS) queue.c
	@echo "$(CC) -DCOMPILE_UTILITY queue.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY -o util-queue.o queue.c

util-tod.o:   $(HDRS) tod.c
	@echo "$(CC) -DCOMPILE_UTILITY tod.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY -o util-tod.o tod.c

util-tree.o:   $(HDRS) tree.c
	@echo "$(CC) -DCOMPILE_UTILITY tree.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY -o util-tree.o tree.c

util-xtextencode.o:   $(HDRS) xtextencode.c
	@echo "$(CC) -DCOMPILE_UTILITY xtextencode.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY -o util-xtextencode.o xtextencode.c

util-os.o:       $(HDRS) os.c
	@echo "$(CC) -DCOMPILE_UTILITY os.c"
	$(FE)$(CC) -c $(CFLAGS) $(INCLUDE) \
				      -DCOMPILE_UTILITY \
				      -DOS_LOAD_AVERAGE \
				      -DFIND_RUNNING_INTERFACES \
				      -o util-os.o os.c

# The local scan module depends only on its own special header, and is compiled
# from a source whose location is set by configuration.

local_scan.o:    config local_scan.h ../$(LOCAL_SCAN_SOURCE)
	@echo "$(CC) local_scan.c"
	$(FE)$(CC) -DLOCAL_SCAN -c $(CFLAGS) -I. $(INCLUDE) -o local_scan.o ../$(LOCAL_SCAN_SOURCE)

# Dependencies for the "ordinary" exim modules

acl.o:           $(HDRS) acl.c
atrn.o:          $(HDRS) atrn.c
base64.o:        $(HDRS) mime.h base64.c
child.o:         $(HDRS) child.c
crypt16.o:       $(HDRS) crypt16.c
daemon.o:        $(HDRS) daemon.c
dbfn.o:          $(HDRS) dbfn.c
debug.o:         $(HDRS) debug.c
deliver.o:       $(HDRS) transports/smtp.h deliver.c
directory.o:     $(HDRS) directory.c
dns.o:           $(HDRS) dns.c
dnsbl.o:         $(HDRS) dnsbl.c
enq.o:           $(HDRS) enq.c
exim.o:          $(HDRS) exim.c
expand.o:        $(HDRS) expand.c
environment.o:   $(HDRS) environment.c
filtertest.o:    $(HDRS) filtertest.c
globals.o:       $(HDRS) globals.c
hash.o:          $(HDRS) hash.c
header.o:        $(HDRS) header.c
host.o:          $(HDRS) host.c
host_address.o:  $(HDRS) host_address.c
ip.o:            $(HDRS) ip.c
log.o:           $(HDRS) log.c
lss.o:           $(HDRS) lss.c
match.o:         $(HDRS) match.c
md5.o:           $(HDRS) md5.c
moan.o:          $(HDRS) moan.c
os.o:            $(HDRS) $(OS_C_INCLUDES) os.c
parse.o:         $(HDRS) parse.c
priv.o:          $(HDRS) priv.c
proxy.o:         $(HDRS) proxy.c
queue.o:         $(HDRS) queue.c
rda.o:           $(HDRS) rda.c
readconf.o:      $(HDRS) readconf.c
receive.o:       $(HDRS) receive.c
retry.o:         $(HDRS) retry.c
rewrite.o:       $(HDRS) rewrite.c
regex_cache.o:   $(HDRS) regex_cache.c
rfc2047.o:       $(HDRS) rfc2047.c
route.o:         $(HDRS) route.c
search.o:        $(HDRS) search.c
smtp_in.o:       $(HDRS) smtp_in.c
smtp_out.o:      $(HDRS) smtp_out.c
spool_in.o:      $(HDRS) spool_in.c
spool_out.o:     $(HDRS) spool_out.c
std-crypto.o:    $(HDRS) std-crypto.c
store.o:         $(HDRS) store.c
string.o:        $(HDRS) string.c
tls.o:           $(HDRS) tls.c \
		 tls-gnu.c tlscert-gnu.c \
		 tls-openssl.c tlscert-openssl.c \
		 tls-cipher-stdname.c
tod.o:           $(HDRS) tod.c
transport.o:     $(HDRS) transport.c
tree.o:          $(HDRS) tree.c
verify.o:        $(HDRS) transports/smtp.h verify.c
xtextencode.o:   $(HDRS) xtextencode.c

# Dependencies for WITH_CONTENT_SCAN modules

malware.o:       $(HDRS) malware.c
mime.o:          $(HDRS) mime.h mime.c
regex.o:         $(HDRS) regex.c
spam.o:          $(HDRS) spam.c
spool_mbox.o:    $(HDRS) spool_mbox.c


# Dependencies for EXPERIMENTAL_* modules

bmi_spam.o:	$(HDRS) bmi_spam.c
dane.o:		$(HDRS) dane.c dane-openssl.c
dcc.o:		$(HDRS) dcc.h dcc.c
imap_utf7.o:	$(HDRS) imap_utf7.c
utf8.o:		$(HDRS) utf8.c
xclient.o:	$(HDRS) xclient.c

# The module containing tables of available lookups, routers, auths, and
# transports must be rebuilt if any of them are. However, because the makefiles
# for the drivers are always run, we don't actually put the dependencies here,
# because if we do, some version of "make" (e.g. IRIX) insist on rebuilding
# drtables.o even though the .a files haven't in fact been updated. Instead
# it is arranged that the lower-level makefiles remove drtables.o when they
# rebuild the .a files.

drtables.o:      $(HDRS) drtables.c

# Some sources live in the lookups, routers or auths directory

$(OBJ_LOOKUPS) $(OBJ_ROUTERS) $(OBJ_AUTHS):    $(HDRS)

$(OBJ_LOOKUPS):	lookups/lf_functions.h
lf_check_file.o: lookups/lf_check_file.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
lf_quote.o:      lookups/lf_quote.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
lf_sqlperform.o: lookups/lf_sqlperform.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<

$(OBJ_ROUTERS):	routers/rf_functions.h
rf_change_domain.o:      routers/rf_change_domain.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
rf_expand_data.o:        routers/rf_expand_data.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
rf_get_errors_address.o: routers/rf_get_errors_address.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
rf_get_munge_headers.o:  routers/rf_get_munge_headers.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
rf_get_transport.o:      routers/rf_get_transport.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
rf_get_ugid.o:           routers/rf_get_ugid.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
rf_lookup_hostlist.o:    routers/rf_lookup_hostlist.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
rf_queue_add.o:          routers/rf_queue_add.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
rf_self_action.o:        routers/rf_self_action.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
rf_set_ugid.o:           routers/rf_set_ugid.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<

auth-spa.o:         auths/auth-spa.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
call_pwcheck.o:     auths/call_pwcheck.c auths/pwcheck.h
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
check_serv_cond.o:  auths/check_serv_cond.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
get_data.o:         auths/get_data.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
get_no64_data.o:    auths/get_no64_data.c
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<
pwcheck.o:          auths/pwcheck.c auths/pwcheck.h
	@echo "$(CC) $<"
	$(FE)$(CC) -c $(CFLAGS) -I. $(INCLUDE) $<



# The exim monitor's private modules - the sources live in a private
# subdirectory. The final binary combines the private modules with some
# modules from the main exim binary.

em_StripChart.o: ../exim_monitor/em_StripChart.c
em_TextPop.o:    ../exim_monitor/em_TextPop.c
em_globals.o:    ../exim_monitor/em_globals.c ../exim_monitor/em_hdr.h
em_init.o:       ../exim_monitor/em_init.c    ../exim_monitor/em_hdr.h
em_log.o:        ../exim_monitor/em_log.c     ../exim_monitor/em_hdr.h
em_main.o:       ../exim_monitor/em_main.c    ../exim_monitor/em_hdr.h
em_menu.o:       ../exim_monitor/em_menu.c    ../exim_monitor/em_hdr.h
em_queue.o:      ../exim_monitor/em_queue.c   ../exim_monitor/em_hdr.h
em_strip.o:      ../exim_monitor/em_strip.c   ../exim_monitor/em_hdr.h
em_text.o:       ../exim_monitor/em_text.c    ../exim_monitor/em_hdr.h
em_xs.o:         ../exim_monitor/em_xs.c      ../exim_monitor/em_hdr.h
em_version.o:    ../exim_monitor/em_version.c ../exim_monitor/em_hdr.h
$(MONBIN): $(HDRS)
		 @echo "$(CC) exim_monitor/$(@:.o=.c)"
		 $(FE)$(CC) -o $@ -c $(CFLAGS) -DCOMPILE_UTILITY -I. -I../exim_monitor $(INCLUDE) $(XINCLUDE) \
		   ../exim_monitor/$(@:.o=.c)


# Targets for the various libraries that Exim uses.

# Copies of modules built as dynamic-load libraries

dynmodules: buildlookups buildrouters buildtransports buildauths \
		buildmisc
	rm -fr dynmodules
	mkdir dynmodules
	for d in lookup router transport auth miscmod; do \
	  for f in $${d}s/*.so; do \
	    [ -e $$f ] && ln $$f dynmodules/`basename $$f .so`_$$d.so; \
	  done; \
	done; \
	true

# The lookups library.

buildlookups: config
	 @cd lookups && $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" CFLAGS="$(CFLAGS)" \
	   CFLAGS_DYNAMIC="$(CFLAGS_DYNAMIC)" HDRS="../version.h $(PHDRS)" \
	   FE="$(FE)" RANLIB="$(RANLIB)" RM_COMMAND="$(RM_COMMAND)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE) $(LOOKUP_INCLUDE)"
	 @echo " "

# The routers library.

buildrouters: config
	 @cd routers && $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" CFLAGS="$(CFLAGS)" \
	   CFLAGS_DYNAMIC="$(CFLAGS_DYNAMIC)" \
	   FE="$(FE)" RANLIB="$(RANLIB)" RM_COMMAND="$(RM_COMMAND)" HDRS="$(PHDRS)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE)"
	 @echo " "

# The transports library.

buildtransports: config
	 @cd transports && $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" CFLAGS="$(CFLAGS)" \
	   CFLAGS_DYNAMIC="$(CFLAGS_DYNAMIC)" \
	   FE="$(FE)" RANLIB="$(RANLIB)" RM_COMMAND="$(RM_COMMAND)" HDRS="$(PHDRS)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE)"
	 @echo " "

# The library of authorization modules

buildauths: config
	 @cd auths && $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" CFLAGS="$(CFLAGS)" \
	   CFLAGS_DYNAMIC="$(CFLAGS_DYNAMIC)" \
	   FE="$(FE)" RANLIB="$(RANLIB)" RM_COMMAND="$(RM_COMMAND)" HDRS="$(PHDRS)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE)"
	 @echo " "

buildmisc: config
	 @cd miscmods && $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) \
	   CC="$(CC)" CFLAGS="$(CFLAGS)" \
	     CFLAGS_DYNAMIC="$(CFLAGS_DYNAMIC)" \
	     LDFLAGS_PARTIAL="$(LDFLAGS_PARTIAL)" HDRS="../version.h $(PHDRS)" \
	     FE="$(FE)" RANLIB="$(RANLIB)" RM_COMMAND="$(RM_COMMAND)" \
	     PERL_CC="$(PERL_CC)" PERL_CCOPTS="$(PERL_CCOPTS)" \
	     PERL_CFLAGS="$(PERL_CFLAGS)" PERL_LFLAGS="$(PERL_LFLAGS)" \
	     INCLUDE="$(INCLUDE) $(IPV6_INCLUDE)" TLS_INCLUDE="$(TLS_INCLUDE)"
	 @echo " "

# The "clean", "install", and "makefile" targets just pass themselves back to
# the main Exim makefile. These targets will be obeyed only if "make" is obeyed
# for them in the build directory.

clean install makefile:; cd ..; $(MAKE) $(MFLAGS) build=$(build) $@

# Targets for building stand-alone testing programs for basic testing of
# some of the building blocks. These are not integrated with the makefile-
# building targets. If you change something that is going to cause the
# makefile to be rebuilt, you must run "make makefile" before running one
# of these.

# The testing programs use different versions of some modules - usually
# with bits cut out that are not relevant to the test in hand. For those
# that are used by several tests, we use a different name.

sa-globals.o:    $(HDRS) globals.c
	$(CC) -c $(CFLAGS) $(INCLUDE) -DSTAND_ALONE -o sa-globals.o globals.c

sa-os.o:         $(HDRS) os.c
	$(CC) -c $(CFLAGS) $(INCLUDE) \
				      -DFIND_RUNNING_INTERFACES \
				      -o sa-os.o os.c

# These are the test targets themselves

test_dbfn:   config.h dbfn.c dummies.o sa-globals.o sa-os.o store.o \
	       string.o tod.o version.o utf8.o
	$(CC) -c $(CFLAGS) $(INCLUDE) -DSTAND_ALONE dbfn.c
	$(CC) -c $(CFLAGS) $(INCLUDE) -DCOMPILE_UTILITY store.c
	$(LNCC) -o test_dbfn $(LFLAGS) dbfn.o \
	  dummies.o sa-globals.o sa-os.o store.o string.o \
	  tod.o version.o utf8.o $(LIBS) $(DBMLIB) $(LDFLAGS)
	rm -f dbfn.o store.o

test_host:   config.h child.c host.c dns.c dummies.c sa-globals.o os.o \
	       host_address.o store.o string.o tod.o tree.o
	$(CC) -c $(CFLAGS) $(INCLUDE) -DSTAND_ALONE -DTEST_HOST child.c
	$(CC) -c $(CFLAGS) $(INCLUDE) -DSTAND_ALONE -DTEST_HOST host.c
	$(CC) -c $(CFLAGS) $(INCLUDE) -DSTAND_ALONE -DTEST_HOST dns.c
	$(CC) -c $(CFLAGS) $(INCLUDE) -DSTAND_ALONE -DTEST_HOST dummies.c
	$(LNCC) -o test_host $(LFLAGS) \
	  host.o host_address.o child.o dns.o dummies.o sa-globals.o os.o store.o string.o \
	  tod.o tree.o $(LIBS) $(LIBRESOLV)
	rm -f child.o dummies.o host.o dns.o

test_os:     os.h os.c dummies.o sa-globals.o store.o string.o tod.o utf8.o
	$(CC) -c $(CFLAGS) $(INCLUDE) -DSTAND_ALONE os.c
	$(LNCC) -o test_os $(LFLAGS) os.o dummies.o \
	  sa-globals.o store.o string.o tod.o utf8.o $(LIBS) $(LDFLAGS)
	rm -f os.o

test_parse:  config.h parse.c dummies.o sa-globals.o \
	     store.o string.o tod.o version.o utf8.o
	$(CC) -c $(CFLAGS) $(INCLUDE) -DSTAND_ALONE parse.c
	$(LNCC) -o test_parse $(LFLAGS) parse.o \
	  dummies.o sa-globals.o store.o string.o tod.o version.o \
	  utf8.o $(LDFLAGS)
	rm -f parse.o

test_string: config.h string.c dummies.o sa-globals.o store.o tod.o utf8.o
	$(CC) -c $(CFLAGS) $(INCLUDE) -DSTAND_ALONE string.c
	$(LNCC) -o test_string $(LFLAGS) -DSTAND_ALONE string.o \
	  dummies.o sa-globals.o store.o tod.o utf8.o $(LIBS) $(LDFLAGS)
	rm -f string.o

# End
